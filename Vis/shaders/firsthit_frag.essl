#ifndef GL_ES
#version 330 es
#endif

precision highp int;
precision highp float;
precision highp sampler3D;

uniform sampler3D volume;
uniform sampler3D gradient;


uniform float steps;

const int MAX_ISO_VALUES = 3;
uniform float iso_values[MAX_ISO_VALUES];
uniform vec3 surface_colors[MAX_ISO_VALUES];
uniform float opacities[MAX_ISO_VALUES];

in vec3 vEye;
in vec3 vDir;

out vec4 fragColor;

/**
    Intersect ray with bounding box and calculate and return intersection points
*/
vec2 intersect_box(vec3 orig, vec3 dir) {
    vec3 box_min = vec3(-0.5);
    vec3 box_max = vec3(0.5);

    vec3 inv_dir = 1.0 / dir; // for efficiency reasons

    vec3 tmin_tmp = (box_min - orig) * inv_dir;
    vec3 tmax_tmp = (box_max - orig) * inv_dir;
    vec3 tmin = min(tmin_tmp, tmax_tmp);
    vec3 tmax = max(tmin_tmp, tmax_tmp);
    float t0 = max(tmin.x, max(tmin.y, tmin.z));
    float t1 = min(tmax.x, min(tmax.y, tmax.z));
    return vec2(t0, t1);
}
// Function to compute the gradient at a given position
vec3 compute_gradient(vec3 pos) {
    float epsilon = 1.0 / 256.0; // Adjust based on volume resolution
    float dx = (texture(volume, pos + vec3(epsilon, 0.0, 0.0)).r - texture(volume, pos - vec3(epsilon, 0.0, 0.0)).r);
    float dy = (texture(volume, pos + vec3(0.0, epsilon, 0.0)).r - texture(volume, pos - vec3(0.0, epsilon, 0.0)).r);
    float dz = (texture(volume, pos + vec3(0.0, 0.0, epsilon)).r - texture(volume, pos - vec3(0.0, 0.0, epsilon)).r);
    return normalize(vec3(dx, dy, dz));
}
void main() {
    vec3 rayDir = normalize(vDir);
    vec2 bounds = intersect_box(vEye, rayDir);

    // if ray does not intersect volume, discard fragment
    if (bounds.x > bounds.y)
        discard;

    bounds.x = max(bounds.x, 0.0);

    vec3 pos = vEye + bounds.x * rayDir; // starting point

    // calculate step size
    float delta = 1.0 / steps;

     // Initialize variables to accumulate the color and opacity
     vec3 accumulatedColor = vec3(0.0);
     float accumulatedAlpha = 0.0;

     // Blinn-Phong shading parameters
     vec3 lightColor = vec3(1.0);
     vec3 lightDir = normalize(vec3(-1.0, 1.0, 1.0)); // Light direction
     vec3 viewDir = rayDir;
     vec3 halfwayDir = normalize(lightDir + viewDir); // Halfway vector

    // use previous value instead of next for efficiency reasons
    vec3 prev_pos = pos - rayDir * delta;
    float prev_value = texture(volume, prev_pos + 0.5).r; // get initial density value

    // sample along the ray
    for (float t = bounds.x; t < bounds.y; t += delta) {
        float density = texture(volume, pos + 0.5).r; // get density value

        for (int i = 0; i < MAX_ISO_VALUES; i++){

            if (density >= iso_values[i] && iso_values[i] >= prev_value) {
                vec3 intersection_point = mix(prev_pos, pos, (iso_values[i] - prev_value) / (density - prev_value));



                vec3 normal = compute_gradient(intersection_point + 0.5);



                // Blinn-Phong shading components
                float ambientStrength = 0.2;
                vec3 ambient = ambientStrength * lightColor;

                float diff = max(dot(normal, lightDir), 0.0);
                vec3 diffuse = diff * lightColor;

                float specularStrength = 0.5;
                float shininess = 32.0;
                float spec = pow(max(dot(normal, halfwayDir), 0.0), shininess);
                vec3 specular = specularStrength * spec * lightColor;

                // Add up all components
                vec3 lighting = (ambient + diffuse + specular) * surface_colors[i];

                // Accumulate color and alpha
                float alpha = opacities[i];
                accumulatedColor += (1.0 - accumulatedAlpha) * alpha * lighting;
                accumulatedAlpha += (1.0 - accumulatedAlpha) * alpha;

                // Break if fully opaque
                if (accumulatedAlpha >= 1.0) {
                    fragColor = vec4(accumulatedColor, accumulatedAlpha);
                    return;
                }

                break;
            }

        }

        prev_value = density;
        prev_pos = pos;
        pos += rayDir * delta;
    }

    // Set final fragment color
    fragColor = vec4(accumulatedColor, accumulatedAlpha);
}
